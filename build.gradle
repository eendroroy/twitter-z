buildscript {
    ext {
        springBootVersion = '1.5.7.RELEASE'
        springLoadedVersion = '1.2.6.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        // flatDir {
        //     dirs "/home/indrajit/_WORKSPACE/gradle-spring-routes-plugin/build/libs"
        // }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.springframework:springloaded:${springLoadedVersion}"
        classpath 'com.github.eendroroy:gradle-springroutes-plugin:0.1.1'
        // classpath name: "gradle-spring-routes-plugin-0.1.1"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'com.github.eendroroy.springroutes'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

configurations {
    providedRuntime
}

check {
//    pmd {
//        consoleOutput = true
//        ruleSets = [
//                "java-basic", "java-braces", "java-naming", "java-clone", "java-codesize",
//                "java-design", "java-finalizers", "java-imports", "java-javabeans", "java-junit",
//                "java-migrating", "java-strictexception", "java-strings", "java-typeresolution",
//                "java-unusedcode"
//        ]
//        sourceSets = [project.sourceSets.main]
//    }
    tasks.withType(Checkstyle) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
        sourceSets {
            [project.sourceSets.main]
        }
    }
    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
        sourceSets {
            [project.sourceSets.main]
        }
    }
}

task checkMain {
    doLast {
        println "  ==> Running PMD for main source set"
        pmdMain.execute()
        println "  ==> Running CheckStyle for main source set"
        checkstyleMain.execute()
        println "  ==> Running FindBugs for main source set"
        findbugsMain.execute()
    }
}

task checkTest {
    doLast {
        println "  ==> Running PMD for test source set"
        pmdTest.execute()
        println "  ==> Running CheckStyle for test source set"
        checkstyleTest.execute()
        println "  ==> Running FindBugs for test source set"
        findbugsTest.execute()
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/java/main/")
    }
}

ext{
    jadeVersion = '0.3.2'
    gsonVersion = '2.8.0'
}

dependencies {
    checkstyle('com.puppycrawl.tools:checkstyle:7.8.2')
    compile("org.springframework.boot:spring-boot-devtools")
    compile("com.domingosuarez.boot:spring-boot-starter-jade4j:${jadeVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.liquibase:liquibase-core")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compileOnly("org.projectlombok:lombok:1.16.18")
    runtime('mysql:mysql-connector-java')
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
